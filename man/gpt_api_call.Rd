% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/17_llm_module_utils.R
\name{gpt_api_call}
\alias{gpt_api_call}
\title{gpt_api_call: Function for calling GPT model APIs (supports OpenAI and Gemini providers)}
\usage{
gpt_api_call(
  messages,
  api_key,
  model = "gpt-4o-mini-2024-07-18",
  max_tokens = 1000,
  temperature = 0.7,
  retry_attempts = 3,
  api_provider = "openai"
)
}
\arguments{
\item{messages}{A list of messages to send to the GPT model, usually representing the conversation history.
Each message should be a list with \code{role} (e.g., "system", "user", or "assistant") and \code{content}.}

\item{api_key}{A string containing the API key required for authentication.}

\item{model}{A string specifying the GPT model to use (default is \code{"gpt-4o-mini-2024-07-18"}).}

\item{max_tokens}{An integer indicating the maximum number of tokens to generate in the response (default is \code{1000}).}

\item{temperature}{A numeric value between 0 and 1 to control the randomness of the response
(default is \code{0.7}, where lower values produce more deterministic results).}

\item{retry_attempts}{An integer specifying the maximum number of retry attempts if the API call fails (default is \code{3}).}

\item{api_provider}{A string indicating the API provider, either \code{"openai"} or \code{"gemini"} (default is \code{"openai"}).}
}
\value{
The generated text from the GPT model if the call is successful. If the call fails after the specified number
of retries, the function returns \code{NULL}.
}
\description{
This internal function is designed to interact with GPT-based APIs (such as OpenAI's GPT or a hypothetical Gemini API).
It handles HTTP requests, retries failed attempts, and parses responses.
This function is not intended for direct use by package users.
}
\note{
Ensure you have a valid API key and the correct endpoint for your chosen provider. For Gemini, update the URL
in the code if necessary.
}
\examples{
# Example: Calling OpenAI's GPT API
messages <- list(
  list(role = "system", content = "You are a helpful assistant."),
  list(role = "user", content = "What is the capital of France?")
)
api_key <- "your_openai_api_key"
gpt_response <- gpt_api_call(
  messages = messages,
  api_key = api_key,
  model = "gpt-4",
  max_tokens = 50,
  temperature = 0.5,
  retry_attempts = 3,
  api_provider = "openai"
)
print(gpt_response)

# Example: Calling Gemini's GPT-like API
gemini_response <- gpt_api_call(
  messages = messages,
  api_key = "your_gemini_api_key",
  model = "gemini-model-v1",
  max_tokens = 50,
  temperature = 0.5,
  retry_attempts = 3,
  api_provider = "gemini"
)
print(gemini_response)

}
\author{
Feifan Zhang \email{FEIFAN004@e.ntu.edu.sg}
}
\keyword{internal}
